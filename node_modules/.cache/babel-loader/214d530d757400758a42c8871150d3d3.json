{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { fetchMyTodos, addTodo, deleteTodo, updateTodo } from \"../utils/api\";\nconst initialState = {\n  todos: []\n};\nconst addTodoReducer = createSlice({\n  name: \"todos\",\n  initialState,\n  reducers: {\n    //Update the redux state with DB\n    fetchTodos: (state, action) => {\n      console.log(\"Fetching todos\");\n      const todos = fetchMyTodos().then(todos => {\n        state.push(todos);\n        console.log(\"this is state new\", state);\n      });\n      return state;\n    },\n    //Adding todos\n    addTodos: (state, action) => {\n      addTodo(action.payload.item, action.payload.id);\n      state.push(action.payload);\n      return state;\n    },\n    //remove todos\n    removeTodos: (state, action) => {\n      deleteTodo(action.payload);\n      return state.filter(item => item.id !== action.payload);\n    },\n    //update todos\n    updateTodos: (state, action) => {\n      return state.map(todo => {\n        if (todo.id === action.payload.id) {\n          updateTodo(action.payload.id, action.payload.item);\n          return { ...todo,\n            item: action.payload.item\n          };\n        }\n\n        return todo;\n      });\n    },\n    //favourite\n    favouriteTodos: (state, action) => {\n      return state.map(todo => {\n        if (todo.id === action.payload) {\n          if (todo.favourite) {\n            return { ...todo,\n              favourite: false\n            };\n          }\n\n          return { ...todo,\n            favourite: true\n          };\n        }\n\n        return todo;\n      });\n    }\n  }\n});\nexport const {\n  addTodos,\n  removeTodos,\n  updateTodos,\n  favouriteTodos,\n  stateUpdate\n} = addTodoReducer.actions;\nexport const reducer = addTodoReducer.reducer;","map":{"version":3,"names":["createSlice","fetchMyTodos","addTodo","deleteTodo","updateTodo","initialState","todos","addTodoReducer","name","reducers","fetchTodos","state","action","console","log","then","push","addTodos","payload","item","id","removeTodos","filter","updateTodos","map","todo","favouriteTodos","favourite","stateUpdate","actions","reducer"],"sources":["/Users/champikamendis/Desktop/todos-frontend-reactjs/src/redux/reducer.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport { fetchMyTodos, addTodo, deleteTodo, updateTodo } from \"../utils/api\";\n\nconst initialState = {\n  todos: [],\n};\n\nconst addTodoReducer = createSlice({\n  name: \"todos\",\n  initialState,\n  \n  reducers: {\n    //Update the redux state with DB\n    fetchTodos: (state, action) => {\n      console.log(\"Fetching todos\");\n      const todos = fetchMyTodos().then((todos) => {\n        state.push(todos)\n        console.log(\"this is state new\", state)\n      });\n      \n\n      return state;\n    },\n\n    //Adding todos\n    addTodos: (state, action) => {\n      addTodo(action.payload.item, action.payload.id)\n      state.push(action.payload);\n\n      return state;\n    },\n\n    //remove todos\n    removeTodos: (state, action) => {\n      deleteTodo(action.payload);\n\n      return state.filter((item) => item.id !== action.payload);\n    },\n\n    //update todos\n    updateTodos: (state, action) => {\n      return state.map((todo) => {\n        if (todo.id === action.payload.id) {\n          updateTodo(action.payload.id, action.payload.item)\n\n          return {\n            ...todo,\n            item: action.payload.item,\n          };\n        }\n\n        return todo;\n      });\n    },\n\n    //favourite\n    favouriteTodos: (state, action) => {\n      return state.map((todo) => {\n        if (todo.id === action.payload) {\n          if (todo.favourite) {\n\n            return {\n              ...todo,\n              favourite: false,\n            };\n          }\n\n          return {\n            ...todo,\n            favourite: true,\n          };\n        }\n\n        return todo;\n      });\n    },\n  },\n});\n\nexport const {\n  addTodos,\n  removeTodos,\n  updateTodos,\n  favouriteTodos,\n  stateUpdate,\n} = addTodoReducer.actions;\nexport const reducer = addTodoReducer.reducer;\n"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,SAASC,YAAT,EAAuBC,OAAvB,EAAgCC,UAAhC,EAA4CC,UAA5C,QAA8D,cAA9D;AAEA,MAAMC,YAAY,GAAG;EACnBC,KAAK,EAAE;AADY,CAArB;AAIA,MAAMC,cAAc,GAAGP,WAAW,CAAC;EACjCQ,IAAI,EAAE,OAD2B;EAEjCH,YAFiC;EAIjCI,QAAQ,EAAE;IACR;IACAC,UAAU,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;MAC7BC,OAAO,CAACC,GAAR,CAAY,gBAAZ;MACA,MAAMR,KAAK,GAAGL,YAAY,GAAGc,IAAf,CAAqBT,KAAD,IAAW;QAC3CK,KAAK,CAACK,IAAN,CAAWV,KAAX;QACAO,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCH,KAAjC;MACD,CAHa,CAAd;MAMA,OAAOA,KAAP;IACD,CAXO;IAaR;IACAM,QAAQ,EAAE,CAACN,KAAD,EAAQC,MAAR,KAAmB;MAC3BV,OAAO,CAACU,MAAM,CAACM,OAAP,CAAeC,IAAhB,EAAsBP,MAAM,CAACM,OAAP,CAAeE,EAArC,CAAP;MACAT,KAAK,CAACK,IAAN,CAAWJ,MAAM,CAACM,OAAlB;MAEA,OAAOP,KAAP;IACD,CAnBO;IAqBR;IACAU,WAAW,EAAE,CAACV,KAAD,EAAQC,MAAR,KAAmB;MAC9BT,UAAU,CAACS,MAAM,CAACM,OAAR,CAAV;MAEA,OAAOP,KAAK,CAACW,MAAN,CAAcH,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYR,MAAM,CAACM,OAA1C,CAAP;IACD,CA1BO;IA4BR;IACAK,WAAW,EAAE,CAACZ,KAAD,EAAQC,MAAR,KAAmB;MAC9B,OAAOD,KAAK,CAACa,GAAN,CAAWC,IAAD,IAAU;QACzB,IAAIA,IAAI,CAACL,EAAL,KAAYR,MAAM,CAACM,OAAP,CAAeE,EAA/B,EAAmC;UACjChB,UAAU,CAACQ,MAAM,CAACM,OAAP,CAAeE,EAAhB,EAAoBR,MAAM,CAACM,OAAP,CAAeC,IAAnC,CAAV;UAEA,OAAO,EACL,GAAGM,IADE;YAELN,IAAI,EAAEP,MAAM,CAACM,OAAP,CAAeC;UAFhB,CAAP;QAID;;QAED,OAAOM,IAAP;MACD,CAXM,CAAP;IAYD,CA1CO;IA4CR;IACAC,cAAc,EAAE,CAACf,KAAD,EAAQC,MAAR,KAAmB;MACjC,OAAOD,KAAK,CAACa,GAAN,CAAWC,IAAD,IAAU;QACzB,IAAIA,IAAI,CAACL,EAAL,KAAYR,MAAM,CAACM,OAAvB,EAAgC;UAC9B,IAAIO,IAAI,CAACE,SAAT,EAAoB;YAElB,OAAO,EACL,GAAGF,IADE;cAELE,SAAS,EAAE;YAFN,CAAP;UAID;;UAED,OAAO,EACL,GAAGF,IADE;YAELE,SAAS,EAAE;UAFN,CAAP;QAID;;QAED,OAAOF,IAAP;MACD,CAjBM,CAAP;IAkBD;EAhEO;AAJuB,CAAD,CAAlC;AAwEA,OAAO,MAAM;EACXR,QADW;EAEXI,WAFW;EAGXE,WAHW;EAIXG,cAJW;EAKXE;AALW,IAMTrB,cAAc,CAACsB,OANZ;AAOP,OAAO,MAAMC,OAAO,GAAGvB,cAAc,CAACuB,OAA/B"},"metadata":{},"sourceType":"module"}